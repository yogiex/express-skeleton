"use strict";
/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Router = void 0;
const core_1 = require("./core");
const utils_1 = require("./utils");
class Router extends core_1.Core {
    /**
     * 处理所有请求方法的请求
     *
     * @param route 路由规则
     * @param handles 处理函数
     */
    all(route, ...handles) {
        this.addToEnd({ method: "ALL", path: route.toString() }, this.parseRoutePath(false, route), ...handles);
    }
    /**
     * 处理GET请求方法的请求
     *
     * @param route 路由规则
     * @param handles 处理函数
     */
    get(route, ...handles) {
        this.addToEnd({ method: "GET", path: route.toString() }, this.parseRoutePath(false, route), ...handles.map((item) => utils_1.wrapMiddlewareHandleWithMethod("GET", item)));
    }
    /**
     * 处理HEAD请求方法的请求
     *
     * @param route 路由规则
     * @param handles 处理函数
     */
    head(route, ...handles) {
        this.addToEnd({ method: "HEAD", path: route.toString() }, this.parseRoutePath(false, route), ...handles.map((item) => utils_1.wrapMiddlewareHandleWithMethod("HEAD", item)));
    }
    /**
     * 处理POST请求方法的请求
     *
     * @param route 路由规则
     * @param handles 处理函数
     */
    post(route, ...handles) {
        this.addToEnd({ method: "POST", path: route.toString() }, this.parseRoutePath(false, route), ...handles.map((item) => utils_1.wrapMiddlewareHandleWithMethod("POST", item)));
    }
    /**
     * 处理PUT请求方法的请求
     *
     * @param route 路由规则
     * @param handles 处理函数
     */
    put(route, ...handles) {
        this.addToEnd({ method: "PUT", path: route.toString() }, this.parseRoutePath(false, route), ...handles.map((item) => utils_1.wrapMiddlewareHandleWithMethod("PUT", item)));
    }
    /**
     * 处理DELETE请求方法的请求
     *
     * @param route 路由规则
     * @param handles 处理函数
     */
    delete(route, ...handles) {
        this.addToEnd({ method: "DELETE", path: route.toString() }, this.parseRoutePath(false, route), ...handles.map((item) => utils_1.wrapMiddlewareHandleWithMethod("DELETE", item)));
    }
    /**
     * 处理CONNECT请求方法的请求
     *
     * @param route 路由规则
     * @param handles 处理函数
     */
    connect(route, ...handles) {
        this.addToEnd({ method: "CONNECT", path: route.toString() }, this.parseRoutePath(false, route), ...handles.map((item) => utils_1.wrapMiddlewareHandleWithMethod("CONNECT", item)));
    }
    /**
     * 处理OPTIONS请求方法的请求
     *
     * @param route 路由规则
     * @param handles 处理函数
     */
    options(route, ...handles) {
        this.addToEnd({ method: "OPTIONS", path: route.toString() }, this.parseRoutePath(false, route), ...handles.map((item) => utils_1.wrapMiddlewareHandleWithMethod("OPTIONS", item)));
    }
    /**
     * 处理TRACE请求方法的请求
     *
     * @param route 路由规则
     * @param handles 处理函数
     */
    trace(route, ...handles) {
        this.addToEnd({ method: "TRACE", path: route.toString() }, this.parseRoutePath(false, route), ...handles.map((item) => utils_1.wrapMiddlewareHandleWithMethod("TRACE", item)));
    }
    /**
     * 处理PATCH请求方法的请求
     *
     * @param route 路由规则
     * @param handles 处理函数
     */
    patch(route, ...handles) {
        this.addToEnd({ method: "PATCH", path: route.toString() }, this.parseRoutePath(false, route), ...handles.map((item) => utils_1.wrapMiddlewareHandleWithMethod("PATCH", item)));
    }
}
exports.Router = Router;
