/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
/// <reference types="node" />
import { Server, IncomingMessage, ServerResponse } from "http";
import { Core } from "./core";
import { Router } from "./router";
import { ListenOptions, ErrorReason, SYMBOL_SERVER } from "./define";
import { Context } from "./context";
import { Request } from "./request";
import { Response } from "./response";
import { TemplateEngineManager } from "./template";
export declare class Application<C extends Context = Context<Request, Response>> extends Core<C> {
    /** 默认Router实例，第一次使用时创建并use() */
    protected defaultRouter?: Router<C>;
    /** http.Server实例 */
    [SYMBOL_SERVER]: Server;
    /** 模板引擎管理器 */
    templateEngine: TemplateEngineManager;
    /** 获取默认Router */
    get router(): Router<C>;
    /** 获取当前http.Server实例 */
    get server(): Server;
    /**
     * 监听端口
     *
     * @param options 监听地址信息
     * @param listeningListener 回调函数
     */
    listen(options: ListenOptions, listeningListener?: () => void): void;
    /**
     * 附加到一个http.Server实例
     *
     * @param server http.Server实例
     */
    attach(server: Server): void;
    /**
     * 关闭服务器
     */
    close(): Promise<unknown>;
    /**
     * 处理请求
     *
     * @param req ServerRequest对象
     * @param res ServerResponse对象
     * @param done 未处理请求的回调函数
     */
    handleRequest: (req: IncomingMessage, res: ServerResponse, done?: ((err?: ErrorReason) => void) | undefined) => void;
    /**
     * 创建Context对象
     *
     * @param req 原始ServerRequest对象
     * @param res 原始ServerResponse对象
     */
    protected createContext(req: IncomingMessage, res: ServerResponse): C;
}
export declare class Connect<C extends Context = Context<Request, Response>> extends Application<C> {
    constructor();
}
