/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
/// <reference types="node" />
import { IncomingMessage } from "http";
import { Url } from "url";
import { Headers } from "./define";
import { Context } from "./context";
import { Socket } from "net";
import { MultipartParserOptions, FileField } from "./component/body";
/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
export declare class Request {
    readonly req: IncomingMessage;
    readonly ctx: Context;
    /** 已解析的URL信息 */
    protected parsedUrlInfo: Url;
    constructor(req: IncomingMessage, ctx: Context);
    /**
     * 初始化完成，由 `Context.init()` 自动调用
     * 一般用于自定义扩展 Request 时，在此方法中加上自己的祝时候完成的代码
     */
    inited(): void;
    /** 获取请求方法 */
    get method(): string | undefined;
    /** 获取URL */
    get url(): string;
    /** 更新URL */
    set url(value: string);
    /** 获取Path（URL不包含查询字符串部分）*/
    get path(): string;
    /** 设置Path（URL不包含查询字符串部分）*/
    set path(value: string);
    /** 获取URL查询字符串部分 */
    get search(): string | null;
    /** 获取已解析的URL查询字符串参数 */
    get query(): Record<string, any> | undefined;
    /** 获取当前HTTP版本 */
    get httpVersion(): string;
    /** 获取所有请求头 */
    get headers(): Headers;
    /**
     * 获取请求头
     *
     * @param name 名称
     */
    getHeader(name: string): string | string[] | undefined;
    /** 获取URL参数 */
    get params(): Record<string, string>;
    /** 设置URL参数 */
    set params(value: Record<string, string>);
    /** 判断是否有URL参数 */
    hasParams(): boolean;
    /** 获取请求Body参数 */
    get body(): Record<string, any>;
    /** 设置请求Body参数 */
    set body(value: Record<string, any>);
    /** 判断是否有请求Body参数 */
    hasBody(): boolean;
    /** 获取请求文件参数 */
    get files(): Record<string, any>;
    /** 设置请求文件参数 */
    set files(value: Record<string, any>);
    /** 判断是否有请求文件参数 */
    hasFiles(): boolean;
    /** 获取请求Cookies信息 */
    get cookies(): Record<string, string>;
    /** 设置请求Cookies信息 */
    set cookies(value: Record<string, string>);
    /** 判断是否有请求Cookie信息 */
    hasCookies(): boolean;
    /** 获取请求signedCookies信息 */
    get signedCookies(): Record<string, string>;
    /** 设置请求signedCookies信息 */
    set signedCookies(value: Record<string, string>);
    /** 判断是否有请求signedCookies信息 */
    hasSignedCookies(): boolean;
    /** 获取请求Session信息 */
    get session(): Record<string, any>;
    /** 设置请求Session信息 */
    set session(value: Record<string, any>);
    /** 判断是否有请求Session信息 */
    hasSession(): boolean;
    /** 客户端IP地址，来源于req.socket.remoteAddress */
    get ip(): string | undefined;
    /** 请求的socket对象 */
    get socket(): Socket;
    /** 解析multipart内容 */
    parseMultipart(options?: MultipartParserOptions): Promise<{
        body: Record<string, any>;
        files: Record<string, FileField>;
    }>;
}
