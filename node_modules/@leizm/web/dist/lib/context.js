"use strict";
/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Context = void 0;
const events_1 = require("events");
const request_1 = require("./request");
const response_1 = require("./response");
const define_1 = require("./define");
const on_writehead_1 = require("./module/on.writehead");
const proxy_request_1 = require("./module/proxy.request");
class Context extends events_1.EventEmitter {
    constructor() {
        super(...arguments);
        /** 用于存储next函数的堆栈 */
        this.nextHandleStack = [];
        /** Request对象的构造函数 */
        this.requestConstructor = request_1.Request;
        /** Response对象的构造函数 */
        this.responseConstructor = response_1.Response;
        /** 其他可任意挂载在Context上的数据 */
        this.data = {};
    }
    /** Session对象 */
    get session() {
        if (this[define_1.SYMBOL_SESSION])
            return this[define_1.SYMBOL_SESSION];
        throw new Error(`ctx.session: please use component.session() middleware firstly`);
    }
    /**
     * 创建Request对象
     *
     * @param req 原始ServerRequest对象
     */
    createRequest(req) {
        return new this.requestConstructor(req, this);
    }
    /**
     * 创建Response对象
     *
     * @param res 原始ServerResponse对象
     */
    createResponse(res) {
        return new this.responseConstructor(res, this);
    }
    /**
     * 初始化
     *
     * @param req 原始ServerRequest对象
     * @param res 原始ServerResponse对象
     */
    init(req, res) {
        this._request = this.createRequest(req);
        this._request.inited();
        this._response = this.createResponse(res);
        this._response.inited();
        this.response.setHeader("X-Powered-By", "@leizm/web");
        res.once("finish", () => this.emit("finish"));
        on_writehead_1.default(res, () => this.emit("writeHead"));
        this.inited();
        return this;
    }
    /**
     * 初始化完成，由 `Context.init()` 自动调用
     * 一般用于自定义扩展 Context 时，在此方法中加上自己的祝时候完成的代码
     */
    inited() { }
    /**
     * 获得路由信息
     */
    get route() {
        if (this[define_1.SYMBOL_RAW_ROUTE_INFO]) {
            return this[define_1.SYMBOL_RAW_ROUTE_INFO];
        }
        return { method: this.request.method || "", path: this.request.path };
    }
    /**
     * 获取Request对象
     */
    get request() {
        return this._request;
    }
    /**
     * 获取Response对象
     */
    get response() {
        return this._response;
    }
    /**
     * 转到下一个中间件
     *
     * @param err 出错信息
     */
    next(err) {
        const next = this.nextHandleStack[this.nextHandleStack.length - 1];
        if (next) {
            next(err);
        }
    }
    /**
     * next函数堆栈入栈
     *
     * @param next 回调函数
     */
    [define_1.SYMBOL_PUSH_NEXT_HANDLE](next) {
        this.nextHandleStack.push(next);
    }
    /**
     * next函数出栈
     */
    [define_1.SYMBOL_POP_NEXT_HANDLE]() {
        return this.nextHandleStack.pop();
    }
    /**
     * 注册中间件执行出错时的事件监听
     *
     * @param callback 回调函数
     */
    onError(callback) {
        this.on("error", callback);
    }
    /**
     * 注册响应结束时的事件监听
     *
     * @param callback 回调函数
     */
    onFinish(callback) {
        this.on("finish", callback);
    }
    /**
     * 注册准备输出响应头时的事件监听
     *
     * @param callback 回调函数
     */
    onWriteHead(callback) {
        this.on("writeHead", callback);
    }
    /**
     * 代理请求
     *
     * @param target
     */
    async proxy(target) {
        return proxy_request_1.proxyRequest(this.request.req, this.response.res, target);
    }
    /**
     * 代理请求
     *
     * @param url 目标地址
     * @param removeHeaderNames 需要删除的原始请求头列表
     */
    async proxyWithHeaders(url, removeHeaderNames = ["host"]) {
        const target = proxy_request_1.parseProxyTarget(url);
        const originalHeaders = { ...this.request.headers };
        for (const n of removeHeaderNames) {
            delete originalHeaders[n];
        }
        target.headers = originalHeaders;
        return proxy_request_1.proxyRequest(this.request.req, this.response.res, target);
    }
}
exports.Context = Context;
