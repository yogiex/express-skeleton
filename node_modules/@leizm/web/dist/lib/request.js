"use strict";
/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Request = void 0;
const url_1 = require("url");
const body_1 = require("./component/body");
/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
class Request {
    constructor(req, ctx) {
        this.req = req;
        this.ctx = ctx;
        const req2 = req;
        req2.originalUrl = req2.originalUrl || req.url;
        this.parsedUrlInfo = url_1.parse(req.url || "", true);
        req2.query = this.parsedUrlInfo.query;
    }
    /**
     * 初始化完成，由 `Context.init()` 自动调用
     * 一般用于自定义扩展 Request 时，在此方法中加上自己的祝时候完成的代码
     */
    inited() { }
    /** 获取请求方法 */
    get method() {
        return this.req.method;
    }
    /** 获取URL */
    get url() {
        return this.req.url || "";
    }
    /** 更新URL */
    set url(value) {
        this.req.url = this.parsedUrlInfo.path = value;
    }
    /** 获取Path（URL不包含查询字符串部分）*/
    get path() {
        return this.parsedUrlInfo.pathname || "";
    }
    /** 设置Path（URL不包含查询字符串部分）*/
    set path(value) {
        this.parsedUrlInfo.pathname = value;
    }
    /** 获取URL查询字符串部分 */
    get search() {
        return this.parsedUrlInfo.search;
    }
    /** 获取已解析的URL查询字符串参数 */
    get query() {
        return this.req.query;
    }
    /** 获取当前HTTP版本 */
    get httpVersion() {
        return this.req.httpVersion;
    }
    /** 获取所有请求头 */
    get headers() {
        return this.req.headers;
    }
    /**
     * 获取请求头
     *
     * @param name 名称
     */
    getHeader(name) {
        return this.req.headers[name.toLowerCase()];
    }
    /** 获取URL参数 */
    get params() {
        return this.req.prams || {};
    }
    /** 设置URL参数 */
    set params(value) {
        this.req.prams = value;
    }
    /** 判断是否有URL参数 */
    hasParams() {
        return !!this.req.prams;
    }
    /** 获取请求Body参数 */
    get body() {
        return this.req.body || {};
    }
    /** 设置请求Body参数 */
    set body(value) {
        this.req.body = value;
    }
    /** 判断是否有请求Body参数 */
    hasBody() {
        return !!this.req.body;
    }
    /** 获取请求文件参数 */
    get files() {
        return this.req.files || {};
    }
    /** 设置请求文件参数 */
    set files(value) {
        this.req.files = value;
    }
    /** 判断是否有请求文件参数 */
    hasFiles() {
        return !!this.req.files;
    }
    /** 获取请求Cookies信息 */
    get cookies() {
        return this.req.cookies || {};
    }
    /** 设置请求Cookies信息 */
    set cookies(value) {
        this.req.cookies = value;
    }
    /** 判断是否有请求Cookie信息 */
    hasCookies() {
        return !!this.req.cookies;
    }
    /** 获取请求signedCookies信息 */
    get signedCookies() {
        return this.req.signedCookies || {};
    }
    /** 设置请求signedCookies信息 */
    set signedCookies(value) {
        this.req.signedCookies = value;
    }
    /** 判断是否有请求signedCookies信息 */
    hasSignedCookies() {
        return !!this.req.signedCookies;
    }
    /** 获取请求Session信息 */
    get session() {
        return this.req.session || {};
    }
    /** 设置请求Session信息 */
    set session(value) {
        this.req.session = value;
    }
    /** 判断是否有请求Session信息 */
    hasSession() {
        return !!this.req.session;
    }
    /** 客户端IP地址，来源于req.socket.remoteAddress */
    get ip() {
        return this.req.socket.remoteAddress;
    }
    /** 请求的socket对象 */
    get socket() {
        return this.req.socket;
    }
    /** 解析multipart内容 */
    async parseMultipart(options = {}) {
        await body_1.parseMultipart(this.ctx, options);
        return { body: this.body, files: this.files };
    }
}
exports.Request = Request;
