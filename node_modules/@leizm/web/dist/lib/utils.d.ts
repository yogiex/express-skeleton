/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
import { MiddlewareHandle, ClassicalMiddlewareHandle, ClassicalMiddlewareErrorHandle, ErrorReason, RegExpOptions, ParsedRoutePathResult, ContextConstructor } from "./define";
import { Context } from "./context";
/**
 * 判断是否为Promise对象
 *
 * @param p 要判断的对象
 */
export declare function isPromise(p: Promise<void>): boolean;
/**
 * 解析路由字符串
 *
 * @param route 路由字符串
 * @param options 选项
 */
export declare function parseRoutePath(route: string | RegExp, options: RegExpOptions): ParsedRoutePathResult;
/**
 * 判断路由规则是否匹配
 *
 * @param pathname 当前路径
 * @param route 当前路由规则
 */
export declare function testRoutePath(pathname: string, route: ParsedRoutePathResult | undefined): boolean;
/**
 * 获取当前匹配路由规则对应的URL参数
 *
 * @param pathname 当前路径
 * @param route 当前路由规则
 */
export declare function getRouteParams(pathname: string, route: ParsedRoutePathResult | undefined): Record<string, string>;
/**
 * 获取当前匹配路由规则对应的URL前缀
 *
 * @param pathname 当前路径
 * @param route 当前路由规则
 */
export declare function getRouteMatchPath(pathname: string, route: ParsedRoutePathResult | null): string;
/**
 * 转换经典的connect中间件
 *
 * @param fn 处理函数
 */
export declare function fromClassicalHandle<C extends Context>(fn: ClassicalMiddlewareHandle): MiddlewareHandle<C>;
/**
 * 转换为经典的connect中间件
 *
 * @param fn 处理函数
 */
export declare function toClassicalHandle(fn: MiddlewareHandle<Context>, contextConstructor?: ContextConstructor): ClassicalMiddlewareHandle;
/**
 * 转换经典的connect错误处理中间件
 *
 * @param fn 处理函数
 */
export declare function fromClassicalErrorHandle<C extends Context>(fn: ClassicalMiddlewareErrorHandle): MiddlewareHandle<C>;
/**
 * 判断是否为错误处理中间件
 *
 * @param handle 处理函数
 */
export declare function isMiddlewareErrorHandle<C>(handle: MiddlewareHandle<C>): boolean;
/**
 * 给当前中间件包装请求方法限制
 *
 * @param method 请求方法
 * @param handle 处理函数
 */
export declare function wrapMiddlewareHandleWithMethod<C extends Context>(method: string, handle: MiddlewareHandle<C>): MiddlewareHandle<C>;
/**
 * 执行中间件
 *
 * @param handle 处理函数
 * @param ctx 当前Context对象
 * @param err 出错信息
 * @param callback 回调函数
 */
export declare function execMiddlewareHandle<C>(handle: MiddlewareHandle<C>, ctx: C, err: ErrorReason, onError: (err: ErrorReason) => void): void;
/**
 * 提示接口更改
 * @param old 旧方法
 * @param current 新方法
 * @param since 开始完全弃用的版本
 */
export declare function notifyDeprecated(old: string, current: string, since: string): void;
/**
 * 返回红色ansi文本
 * @param str
 */
export declare function colorRed(str: string): string;
