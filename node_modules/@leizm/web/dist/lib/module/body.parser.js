"use strict";
/**
 * @leizm/web 中间件基础框架 - 内置模块
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.getContentStream = exports.readAllBody = void 0;
const zlib_1 = require("zlib");
/**
 * 读取指定 Stream 的所有内容
 * @param stream
 * @param limit
 */
function readAllBody(stream, limit) {
    return new Promise((resolve, reject) => {
        const list = [];
        let length = 0;
        let isBreak = false;
        stream.on("data", (chunk) => {
            if (isBreak) {
                stream.pause();
                return;
            }
            list.push(chunk);
            length += chunk.length;
            checkLength();
        });
        stream.on("end", () => {
            if (isBreak)
                return;
            checkLength();
            resolve({ data: Buffer.concat(list) });
        });
        function checkLength() {
            if (length > limit) {
                isBreak = true;
                return resolve({ status: 413, error: new Error(`out of max body size limit`) });
            }
        }
    });
}
exports.readAllBody = readAllBody;
/**
 * 获得 Request 的 Stream
 * @param req
 */
function getContentStream(req) {
    const encoding = (req.headers["content-encoding"] || "identity").toLowerCase();
    const length = req.headers["content-length"];
    switch (encoding) {
        case "deflate":
            return { stream: req.pipe(zlib_1.createInflate()), length };
        case "gzip":
            return { stream: req.pipe(zlib_1.createGunzip()), length };
        case "identity":
            return { stream: req, length };
        default:
            return { status: 415, error: new Error(`unsupported content encoding ${encoding}`) };
    }
}
exports.getContentStream = getContentStream;
