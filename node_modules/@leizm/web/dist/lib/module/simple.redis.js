"use strict";
/**
 * @leizm/web 中间件基础框架 - 内置模块
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleRedisClient = exports.DEFAULT_REDIS_OPTIONS = void 0;
const events_1 = require("events");
const net_1 = require("net");
class RedisParser {
    constructor() {
        /** 已初步解析出来的行 */
        this._lines = [];
        /** 剩余不能构成一行的文本 */
        this._text = "";
    }
    /**
     * 将收到的数据添加到缓冲区
     */
    push(text) {
        // 将结果按照\r\n 分隔
        const lines = (this._text + text.toString()).split("\r\n");
        // 如果结尾是\r\n，那么数组最后一个元素肯定是一个空字符串
        // 否则，我们应该将剩余的部分跟下一个 data 事件接收到的数据连起来
        this._text = lines.pop() || "";
        this._lines = this._lines.concat(...lines);
    }
    /**
     * 解析下一个结果，如果没有则返回 null
     */
    next() {
        const lines = this._lines;
        const first = lines[0];
        // 去掉指定数量的行，并且返回结果
        const popResult = (lineNumber, result) => {
            this._lines = this._lines.slice(lineNumber);
            return (this.result = result);
        };
        // 返回空结果
        const popEmpty = () => {
            return (this.result = false);
        };
        if (lines.length < 1)
            return popEmpty();
        switch (first[0]) {
            case "+":
                return popResult(1, { data: first.slice(1) });
            case "-":
                return popResult(1, { error: first.slice(1) });
            case ":":
                return popResult(1, { data: Number(first.slice(1)) });
            case "$": {
                const n = Number(first.slice(1));
                if (n === -1) {
                    // 如果是 $-1 表示空结果
                    return popResult(1, { data: null });
                }
                else {
                    // 否则取后面一行作为结果
                    const second = lines[1];
                    if (typeof second !== "undefined") {
                        return popResult(2, { data: second });
                    }
                    else {
                        return popEmpty();
                    }
                }
            }
            case "*": {
                const n = Number(first.slice(1));
                if (n === 0) {
                    return popResult(1, { data: [] });
                }
                else {
                    const array = [];
                    let i = 1;
                    for (; i < lines.length && array.length < n; i++) {
                        const a = lines[i];
                        const b = lines[i + 1];
                        if (a.slice(0, 3) === "$-1") {
                            array.push(null);
                        }
                        else if (a[0] === ":") {
                            array.push(Number(a.slice(1)));
                        }
                        else {
                            if (typeof b !== "undefined") {
                                array.push(b);
                                i++;
                            }
                            else {
                                return popEmpty();
                            }
                        }
                    }
                    if (array.length === n) {
                        return popResult(i, { data: array });
                    }
                    else {
                        return popEmpty();
                    }
                }
            }
            default:
                return popEmpty();
        }
    }
}
exports.DEFAULT_REDIS_OPTIONS = {
    host: "127.0.0.1",
    port: 6379,
    db: 0,
    password: "",
};
class SimpleRedisClient extends events_1.EventEmitter {
    constructor(options = {}) {
        super();
        this._parser = new RedisParser();
        /** 回调函数列表 */
        this._callbacks = [];
        /** 待发送数据列表 */
        this._sendBuffers = [];
        /** 连接状态 */
        this._isConnected = false;
        this._isConnecting = false;
        this.options = {
            ...exports.DEFAULT_REDIS_OPTIONS,
            ...options,
        };
    }
    get connected() {
        return this._isConnected;
    }
    /**
     * 接收到数据，循环结果
     */
    _pushData(data) {
        this._parser.push(data);
        while (this._parser.next()) {
            const result = this._parser.result;
            const cb = this._callbacks.shift();
            if (result.error) {
                cb(new Error(result.error), null);
            }
            else {
                cb(null, result.data);
            }
        }
    }
    /**
     * 连接
     */
    _connect() {
        if (this._isConnecting)
            return;
        this._isConnected = false;
        this.socket = net_1.createConnection(this.options.port, this.options.host, () => {
            this._isConnected = true;
            this._isConnecting = false;
            this.emit("connect");
            if (this.options.password) {
                this.preCommand(["AUTH", this.options.password], (err) => {
                    if (err) {
                        this.emit("error", new Error(`auth failed: ${err.message}`));
                    }
                });
            }
            if (this.options.db > 0) {
                this.preCommand(["SELECT", this.options.db], (err) => {
                    if (err) {
                        this.emit("error", new Error(`select database failed: ${err.message}`));
                    }
                });
            }
            this._sendBuffers.forEach((data) => this.socket.write(data));
            this._sendBuffers = [];
        });
        this._isConnecting = true;
        this.socket.on("error", (err) => {
            this._isConnecting = false;
            this.emit("error", err);
        });
        this.socket.on("close", () => {
            this._isConnecting = false;
            delete this.socket;
            // 处理未完成的任务和回调
            const callbacks = this._callbacks.slice();
            this._callbacks = [];
            this._sendBuffers = [];
            this._parser = new RedisParser();
            callbacks.forEach((callback) => callback(new Error(`connection has been closed`), null));
            this.emit("close");
        });
        this.socket.on("end", () => {
            this.emit("end");
        });
        this.socket.on("data", (data) => {
            this._pushData(data);
        });
    }
    /**
     * 发送命令给服务器
     * @param cmd
     * @param callback
     */
    command(cmd, callback) {
        setImmediate(() => {
            this._callbacks.push(callback);
            const data = `${cmd.map(stringify).join(" ")}\r\n`;
            if (this.socket) {
                this.socket.write(data);
            }
            else {
                this._sendBuffers.push(data);
                this._connect();
            }
        });
    }
    preCommand(cmd, callback) {
        this._callbacks.push(callback);
        const data = `${cmd.map(stringify).join(" ")}\r\n`;
        if (this.socket) {
            this.socket.write(data);
        }
    }
    /**
     * 关闭连接
     */
    end() {
        if (this.socket) {
            this.socket.destroy();
        }
    }
    get(key, callback) {
        return this.command(["GET", key], callback);
    }
    setex(key, ttl, data, callback) {
        return this.command(["SETEX", key, ttl, data], callback);
    }
    expire(key, ttl, callback) {
        return this.command(["EXPIRE", key, ttl], callback);
    }
    del(key, callback) {
        return this.command(["DEL", key], callback);
    }
}
exports.SimpleRedisClient = SimpleRedisClient;
function stringify(v) {
    return JSON.stringify(v);
}
// const conn = new SimpleRedisClient({ db: 5 });
// setInterval(() => {
//   console.log(conn);
//   conn.command(["set", "abc", Date.now()], (err, ret) => {
//     console.log(err, ret);
//   });
// }, 2000);
// conn.on("error", err => console.log("redis error", err));
