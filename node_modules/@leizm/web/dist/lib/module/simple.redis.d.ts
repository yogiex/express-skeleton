/**
 * @leizm/web 中间件基础框架 - 内置模块
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
/// <reference types="node" />
import { EventEmitter } from "events";
import { Socket } from "net";
import { RedisCompatibleClient } from "../component/session.redis";
declare class RedisParser {
    /** 已初步解析出来的行 */
    protected _lines: string[];
    /** 剩余不能构成一行的文本 */
    protected _text: string;
    /** 解析结果 */
    result: any;
    /**
     * 将收到的数据添加到缓冲区
     */
    push(text: string | Buffer): void;
    /**
     * 解析下一个结果，如果没有则返回 null
     */
    next(): boolean | {
        data?: any;
        error?: string | undefined;
    };
}
export interface SimpleRedisClientOptions {
    /** Redis服务器地址 */
    host?: string;
    /** Redis服务器端口 */
    port?: number;
    /** Redis服务器数据库号 */
    db?: number;
    /** Redis服务器密码 */
    password?: string;
}
export declare const DEFAULT_REDIS_OPTIONS: Required<SimpleRedisClientOptions>;
export declare class SimpleRedisClient extends EventEmitter implements RedisCompatibleClient {
    protected _parser: RedisParser;
    /** 回调函数列表 */
    protected _callbacks: Array<(err: Error | null, ret: any) => void>;
    /** 待发送数据列表 */
    protected _sendBuffers: Array<string | Buffer>;
    /** 连接状态 */
    protected _isConnected: boolean;
    protected _isConnecting: boolean;
    /** 参数 */
    protected readonly options: Required<SimpleRedisClientOptions>;
    /** 连接实例 */
    socket?: Socket;
    constructor(options?: SimpleRedisClientOptions);
    get connected(): boolean;
    /**
     * 接收到数据，循环结果
     */
    protected _pushData(data: Buffer): void;
    /**
     * 连接
     */
    protected _connect(): void;
    /**
     * 发送命令给服务器
     * @param cmd
     * @param callback
     */
    command(cmd: Array<string | number | boolean>, callback: (err: Error | null, ret: any) => void): void;
    protected preCommand(cmd: Array<string | number | boolean>, callback: (err: Error | null, ret: any) => void): void;
    /**
     * 关闭连接
     */
    end(): void;
    get(key: string, callback: (err: Error | null, ret: any) => void): void;
    setex(key: string, ttl: number, data: string, callback: (err: Error | null, ret: any) => void): void;
    expire(key: string, ttl: number, callback: (err: Error | null, ret: any) => void): void;
    del(key: string, callback: (err: Error | null, ret: any) => void): void;
}
export {};
