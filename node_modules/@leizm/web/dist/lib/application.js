"use strict";
/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Connect = exports.Application = void 0;
const http_1 = require("http");
const finalhandler_1 = require("./finalhandler");
const core_1 = require("./core");
const router_1 = require("./router");
const define_1 = require("./define");
const template_1 = require("./template");
const utils_1 = require("./utils");
class Application extends core_1.Core {
    constructor() {
        super(...arguments);
        /** 模板引擎管理器 */
        this.templateEngine = new template_1.TemplateEngineManager();
        /**
         * 处理请求
         *
         * @param req ServerRequest对象
         * @param res ServerResponse对象
         * @param done 未处理请求的回调函数
         */
        this.handleRequest = (req, res, done) => {
            done =
                done ||
                    function (err) {
                        return finalhandler_1.default(req, res)(err);
                    };
            const ctx = this.createContext(req, res);
            this.handleRequestByContext(ctx, done);
        };
    }
    /** 获取默认Router */
    get router() {
        if (!this.defaultRouter) {
            this.defaultRouter = new router_1.Router();
            this.use("/", this.defaultRouter);
        }
        return this.defaultRouter;
    }
    /** 获取当前http.Server实例 */
    get server() {
        if (!this[define_1.SYMBOL_SERVER])
            this[define_1.SYMBOL_SERVER] = new http_1.Server(this.handleRequest.bind(this));
        return this[define_1.SYMBOL_SERVER];
    }
    /**
     * 监听端口
     *
     * @param options 监听地址信息
     * @param listeningListener 回调函数
     */
    listen(options, listeningListener) {
        this.server.listen(options, listeningListener);
    }
    /**
     * 附加到一个http.Server实例
     *
     * @param server http.Server实例
     */
    attach(server) {
        this[define_1.SYMBOL_SERVER] = server;
        server.on("request", this.handleRequest.bind(this));
    }
    /**
     * 关闭服务器
     */
    async close() {
        return new Promise((resolve, reject) => {
            if (this[define_1.SYMBOL_SERVER]) {
                this[define_1.SYMBOL_SERVER].close(() => resolve());
            }
            else {
                resolve();
            }
        });
    }
    /**
     * 创建Context对象
     *
     * @param req 原始ServerRequest对象
     * @param res 原始ServerResponse对象
     */
    createContext(req, res) {
        const ctx = super.createContext(req, res);
        ctx[define_1.SYMBOL_CONNECT] = this;
        return ctx;
    }
}
exports.Application = Application;
class Connect extends Application {
    constructor() {
        super();
        utils_1.notifyDeprecated("new Connect()", "new Application()", "3.0.0");
    }
}
exports.Connect = Connect;
