/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
/// <reference types="node" />
import { ServerResponse } from "http";
import { Context } from "./context";
import * as send from "send";
import { CookieOptions, TemplateRenderData } from "./define";
import { Readable } from "stream";
export declare class Response {
    readonly res: ServerResponse;
    readonly ctx: Context;
    constructor(res: ServerResponse, ctx: Context);
    /**
     * 初始化完成，由 `Context.init()` 自动调用
     * 一般用于自定义扩展 Response 时，在此方法中加上自己的祝时候完成的代码
     */
    inited(): void;
    /**
     * 响应状态码
     */
    get statusCode(): number;
    /**
     * 响应状态消息
     */
    get statusMessage(): string;
    /**
     * 响应头是否已发送
     */
    get headersSent(): boolean;
    /**
     * 是否已响应完成
     */
    get finished(): boolean;
    /**
     * 设置响应状态码（弃用，请使用 status 代替）
     *
     * @param statusCode 响应状态码
     */
    setStatus(statusCode: number): this;
    /**
     * 设置响应状态码
     *
     * @param statusCode 响应状态码
     */
    status(statusCode: number): this;
    /**
     * 获取响应头
     *
     * @param name 名称
     */
    getHeader(name: string): string | string[] | number | undefined;
    /**
     * 获取所有响应头
     *
     * @param name 名称
     */
    getHeaders(): Record<string, string | string[] | number>;
    /**
     * 设置响应头
     *
     * @param name 名称
     * @param value 值
     */
    setHeader(name: string, value: string | string[] | number): this;
    /**
     * 添加响应头
     *
     * @param name 名称
     * @param value 值
     */
    appendHeader(name: string, value: string | string[] | number): this;
    /**
     * 设置响应头
     *
     * @param headers 响应头
     */
    setHeaders(headers: Record<string, string | string[] | number>): this;
    /**
     * 删除响应头
     *
     * @param name 名称
     */
    removeHeader(name: string): this;
    /**
     * 写响应头
     *
     * @param statusCode 响应状态码
     * @param headers 响应头
     */
    writeHead(statusCode: number, headers: Record<string, string | string[] | number>): this;
    /**
     * 根据文件名或文件后缀设置 Content-Type
     *
     * @param fileName
     */
    type(fileName: string): this;
    /**
     * 输出数据
     *
     * @param data 要输出的数据
     * @param encoding 字符编码
     * @param callback 回调函数
     */
    write(data: string | Buffer | Uint8Array, encoding?: string, callback?: () => void): boolean;
    /**
     * 输出数据并结束
     *
     * @param data 要输出的数据
     * @param encoding 字符编码
     * @param callback 回调函数
     */
    end(data?: string | Buffer | Uint8Array, encoding?: string, callback?: () => void): void;
    /**
     * 响应JSON
     * @param data 数据
     */
    json(data: any): void;
    /**
     * 响应HTML页面
     * @param str 内容
     */
    html(str: Buffer | string): void;
    /**
     * 响应文件内容
     * @param file 文件名
     * @param options
     */
    file(file: string, options?: send.SendOptions): void;
    /**
     * HTTP 302 临时重定向（弃用，请使用 redirectTemporary 代替）
     * @param url 网址
     * @param content 内容
     */
    temporaryRedirect(url: string, content?: string): void;
    /**
     * HTTP 302 临时重定向
     * @param url 网址
     * @param content 内容
     */
    redirectTemporary(url: string, content?: string): void;
    /**
     * HTTP 301 永久重定向（弃用，请使用 redirectPermanent 代替）
     * @param url 网址
     * @param content 内容
     */
    permanentRedirect(url: string, content?: string): void;
    /**
     * HTTP 301 永久重定向
     * @param url 网址
     * @param content 内容
     */
    redirectPermanent(url: string, content?: string): void;
    /**
     * 删除Cookie
     * @param name 名称
     * @param options 选项
     */
    clearCookie(name: string, options?: CookieOptions): void;
    /**
     * 设置Cookie
     * @param name 名称
     * @param value 值
     * @param options 选项
     */
    cookie(name: string, value: any, options?: CookieOptions): void;
    /**
     * 渲染模板
     * @param name 模板名称
     * @param data 模板数据
     */
    render(name: string, data?: TemplateRenderData): Promise<void>;
    /**
     * 响应压缩的内容
     * @param data
     * @param contentType
     */
    gzip(data: string | Buffer | Readable, contentType?: string): Promise<void>;
}
