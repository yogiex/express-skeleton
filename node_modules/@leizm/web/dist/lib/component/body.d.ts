/**
 * @leizm/web 中间件基础框架 - 内置中间件
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
/// <reference types="node" />
import { Context } from "../context";
import { MiddlewareHandle } from "../define";
import * as bodyParser from "body-parser";
export interface JsonParserOptions extends bodyParser.OptionsJson {
}
export interface TextParserOptions extends bodyParser.OptionsText {
}
export interface UrlencodedParserOptions extends bodyParser.OptionsUrlencoded {
}
export interface RawParserOptions extends bodyParser.Options {
}
export interface MultipartParserOptions {
    /** 字段名称长度，默认 100 */
    fieldNameSize?: number;
    /** 字段值长度，默认 100KB */
    fieldSize?: number;
    /** 字段数量，默认 Infinity */
    fields?: number;
    /** 文件大小，默认 Infinity */
    fileSize?: number;
    /** 文件数量，默认 Infinity */
    files?: number;
    /** 字段和文件总数，默认 Infinity */
    parts?: number;
    /** 字段属性对数量，默认 2000 */
    headerPairs?: number;
    /** 小文件尺寸，当文件尺寸小于此尺寸时则只保存到内存中，默认 0 */
    smallFileSize?: number;
}
export declare const DEFAULT_MULTIPART_PARSER_OPTIONS: Required<MultipartParserOptions>;
export interface FileField {
    /** 原始文件名 */
    originalName: string;
    /** 编码 */
    encoding: string;
    /** MIME 类型 */
    mimeType: string;
    /** 文件大小 */
    size: number;
    /** 临时文件路径 */
    path?: string;
    /** 文件内容 */
    buffer?: Buffer;
}
export declare function json(options?: JsonParserOptions): MiddlewareHandle<Context>;
export declare function text(options?: TextParserOptions): MiddlewareHandle<Context>;
export declare function urlencoded(options?: UrlencodedParserOptions): MiddlewareHandle<Context>;
export declare function raw(options?: RawParserOptions): MiddlewareHandle<Context>;
export declare function multipart(options?: MultipartParserOptions): MiddlewareHandle<Context>;
export declare function parseMultipart(ctx: Context, options?: MultipartParserOptions): Promise<void>;
