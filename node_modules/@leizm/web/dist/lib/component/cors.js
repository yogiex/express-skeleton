"use strict";
/**
 * @leizm/web 中间件基础框架 - 内置中间件
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.cors = exports.DEFAULT_CORS_OPTIONS = void 0;
const assert = require("assert");
const url_1 = require("url");
exports.DEFAULT_CORS_OPTIONS = {
    domain: [],
    any: false,
    headers: {},
    maxAge: 0,
    credentials: true,
    allowHeaders: ["PUT", "POST", "GET", "HEAD", "DELETE", "OPTIONS", "TRACE"],
    allowMethods: ["Origin", "X-Requested-With", "Content-Type", "Content-Length", "Accept", "Authorization", "Cookie"],
};
/**
 * CORS中间件
 */
function cors(options = {}) {
    const opts = { ...exports.DEFAULT_CORS_OPTIONS, ...options };
    if (opts.any) {
        assert(opts.any === true, `invalid 'any' option: must be true`);
    }
    else {
        assert(Array.isArray(opts.domain), `invalid 'domain' option: must be an array`);
    }
    if ("maxAge" in opts) {
        opts.headers["Access-Control-Max-Age"] = String(opts.maxAge);
    }
    if ("credentials" in opts) {
        assert(typeof opts.credentials === "boolean", `invalid 'credentials' option: must be true or false`);
        opts.headers["Access-Control-Allow-Credentials"] = String(opts.credentials);
    }
    if ("allowHeaders" in opts) {
        assert(Array.isArray(opts.allowHeaders), `invalid 'allowHeaders' option: must be an array`);
        opts.headers["Access-Control-Allow-Headers"] = opts.allowHeaders.join(", ");
    }
    if ("allowMethods" in opts) {
        assert(Array.isArray(opts.allowMethods), `invalid 'allowMethods' option: must be an array`);
        opts.headers["Access-Control-Allow-Methods"] = opts.allowMethods.join(", ");
    }
    function setAdditionalHeaders(ctx) {
        if (opts.headers) {
            for (const name in opts.headers) {
                ctx.response.setHeader(name, opts.headers[name]);
            }
        }
    }
    if (opts.any) {
        return function (ctx) {
            const origin = ctx.request.headers.origin;
            if (origin) {
                ctx.response.setHeader("Access-Control-Allow-Origin", origin);
                setAdditionalHeaders(ctx);
            }
            ctx.next();
        };
    }
    return function (ctx) {
        const origin = ctx.request.headers.origin;
        const info = url_1.parse(String(origin));
        if (origin && opts.domain.indexOf(info.host || "") !== -1) {
            ctx.response.setHeader("Access-Control-Allow-Origin", origin);
            setAdditionalHeaders(ctx);
        }
        ctx.next();
    };
}
exports.cors = cors;
