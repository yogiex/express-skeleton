/**
 * @leizm/web 中间件基础框架 - 内置中间件
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
import { SessionStore, SessionDataSerializeFunction, SessionDataUnSerializeFunction } from "./session";
import { SimpleRedisClientOptions } from "../module/simple.redis";
/** 默认Redis Key前缀 */
export declare const DEFAULT_REDIS_PREFIX = "sess:";
export interface SessiionRedisStoreOptions extends SimpleRedisClientOptions {
    /** key前缀 */
    prefix?: string;
    /** 客户端实例 */
    client?: RedisCompatibleClient;
    /** 数据序列化函数 */
    serialize?: SessionDataSerializeFunction;
    /** 数据反序列化函数 */
    unserialize?: SessionDataUnSerializeFunction;
}
/**
 * Redis客户端接口
 */
export interface RedisCompatibleClient {
    get(key: string, callback: (err: Error | null, ret: any) => void): void;
    setex(key: string, ttl: number, data: string, callback: (err: Error | null, ret: any) => void): void;
    expire(key: string, ttl: number, callback: (err: Error | null, ret: any) => void): void;
    del(key: string, callback: (err: Error | null, ret: any) => void): void;
}
export declare class SessiionRedisStore implements SessionStore {
    protected readonly options: SessiionRedisStoreOptions;
    protected keyPrefix: string;
    protected client: RedisCompatibleClient;
    protected serialize: SessionDataSerializeFunction;
    protected unserialize: SessionDataUnSerializeFunction;
    constructor(options: SessiionRedisStoreOptions);
    protected getKey(key: string): string;
    get(sid: string): Promise<Record<string, any>>;
    set(sid: string, data: Record<string, any>, maxAge: number): Promise<void>;
    destroy(sid: string): Promise<void>;
    touch(sid: string, maxAge: number): Promise<void>;
}
