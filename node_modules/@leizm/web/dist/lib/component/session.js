"use strict";
/**
 * @leizm/web 中间件基础框架 - 内置中间件
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_SESSION_UNSERIALIZE = exports.DEFAULT_SESSION_SERIALIZE = exports.DEFAULT_SESSION_OPTIONS = exports.DEFAULT_SESSION_MAX_AGE = exports.DEFAULT_SESSION_COOKIE = exports.DEFAULT_SESSION_NAME = exports.DEFAULT_SESSION_GENID = exports.getDataHash = exports.SessionInstance = exports.session = void 0;
const define_1 = require("../define");
const session_memory_1 = require("./session.memory");
const simple_random_1 = require("../module/simple.random");
const crc32_1 = require("../module/crc32");
/**
 * Session中间件
 * 注意：需要依赖cookieParser中间件，否则无法正确取得sessionId
 */
function session(options = {}) {
    const opts = { ...exports.DEFAULT_SESSION_OPTIONS, ...options };
    const isSigned = !!(opts.cookie && opts.cookie.signed);
    const cookieName = opts.name;
    opts.cookie.maxAge = opts.maxAge;
    return async function (ctx) {
        const currentSid = (isSigned ? ctx.request.signedCookies : ctx.request.cookies)[cookieName];
        const sid = currentSid || opts.genid(ctx);
        const sess = (ctx[define_1.SYMBOL_SESSION] = new SessionInstance(ctx, sid, opts));
        ctx.request.session = sess.data;
        if (currentSid) {
            // 旧的session，需要载入其数据
            await sess.reload();
        }
        ctx.onWriteHead(() => {
            ctx.response.cookie(sess.cookieName, sess.id, opts.cookie);
            sess.save();
        });
        ctx.next();
    };
}
exports.session = session;
class SessionInstance {
    constructor(ctx, id, options) {
        this.ctx = ctx;
        this.id = id;
        this._data = {};
        this._hash = "";
        this._isDestroy = false;
        this.store = options.store;
        this.cookieName = options.name;
        this.maxAge = options.maxAge;
    }
    get data() {
        return this._data;
    }
    set data(v) {
        this._data = this.ctx.request.session = v;
    }
    regenerate() {
        return this.destroy().then(() => {
            this.data = {};
            this._isDestroy = false;
        });
    }
    destroy() {
        return this.store.destroy(this.id).then(() => {
            this.data = {};
            this._hash = "";
            this._isDestroy = true;
        });
    }
    reload() {
        return this.store.get(this.id).then((data) => {
            this.data = data;
            this._hash = getDataHash(this.data);
        });
    }
    save() {
        if (this._isDestroy)
            return Promise.resolve();
        const hash = getDataHash(this.data);
        if (hash === this._hash) {
            // 如果内容没有改变，则只执行touch
            return this.touch();
        }
        return this.forceSave();
    }
    forceSave() {
        return this.store.set(this.id, this.data, this.maxAge);
    }
    touch() {
        return this.store.touch(this.id, this.maxAge);
    }
}
exports.SessionInstance = SessionInstance;
function getDataHash(data) {
    return crc32_1.default(JSON.stringify(data)).toString(16);
}
exports.getDataHash = getDataHash;
/** 默认生成SessionId的函数 */
exports.DEFAULT_SESSION_GENID = (ctx) => simple_random_1.generateSessionId();
/** 默认SessionId存储于Cookie的名称 */
exports.DEFAULT_SESSION_NAME = "web.sid";
/** 默认Cookie选项 */
exports.DEFAULT_SESSION_COOKIE = { path: "/", httpOnly: true };
/** 默认Session MaxAge */
exports.DEFAULT_SESSION_MAX_AGE = 0;
/** 默认Session中间件选项 */
exports.DEFAULT_SESSION_OPTIONS = {
    cookie: exports.DEFAULT_SESSION_COOKIE,
    genid: exports.DEFAULT_SESSION_GENID,
    name: exports.DEFAULT_SESSION_NAME,
    store: new session_memory_1.SessiionMemoryStore(),
    maxAge: exports.DEFAULT_SESSION_MAX_AGE,
};
/** 默认Session数据序列化函数 */
exports.DEFAULT_SESSION_SERIALIZE = (data) => JSON.stringify(data || {});
/** 默认Session数据反序列化函数 */
exports.DEFAULT_SESSION_UNSERIALIZE = (data) => JSON.parse(data) || {};
