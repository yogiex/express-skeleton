"use strict";
/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Core = void 0;
const context_1 = require("./context");
const define_1 = require("./define");
const utils_1 = require("./utils");
class Core {
    constructor() {
        /** 中间件堆栈 */
        this.stack = [];
        /** Context对象构造函数 */
        this.contextConstructor = context_1.Context;
        /** 解析路由选项 */
        this.routeOptions = {
            sensitive: true,
            strict: true,
            end: true,
            delimiter: "/",
        };
        /** use()当前中间件时的字符串路径 */
        this.originalPath = "";
    }
    get path() {
        return this.originalPath;
    }
    set path(s) {
        if (s) {
            if (s.slice(-1) === "/") {
                s = s.slice(0, -1);
            }
            this.originalPath = s;
        }
    }
    /**
     * 创建Context对象
     *
     * @param req 原始ServerRequest对象
     * @param res 原始ServerResponse对象
     */
    createContext(req, res) {
        return new this.contextConstructor().init(req, res);
    }
    /**
     * 解析路由规则
     *
     * @param isPrefix 是否为前缀模式
     * @param route 路由规则
     */
    parseRoutePath(isPrefix, route) {
        if (isPrefix && (!route || route === "/")) {
            return;
        }
        return utils_1.parseRoutePath(route, {
            ...this.routeOptions,
            end: !isPrefix,
        });
    }
    /**
     * 生成中间件
     */
    toMiddleware() {
        const self = this;
        return function (ctx) {
            let removedPath = "";
            if (self.route) {
                removedPath = utils_1.getRouteMatchPath(ctx.request.path, self.route);
                if (removedPath) {
                    ctx.request.url = ctx.request.url.slice(removedPath.length);
                    ctx.request.path = ctx.request.path.slice(removedPath.length);
                }
            }
            self.handleRequestByContext(ctx, function (err) {
                if (removedPath) {
                    ctx.request.url = removedPath + ctx.request.url;
                    ctx.request.path = removedPath + ctx.request.path;
                }
                ctx.next(err);
            });
        };
    }
    /**
     * 注册中间件
     *
     * @param route 路由规则
     * @param handles 中间件对象或处理函数
     */
    use(route, ...handles) {
        const parsedRoute = this.parseRoutePath(true, route);
        this.add(parsedRoute, ...handles.map((item) => {
            if (item instanceof Core) {
                item.path = route.toString();
                if (this.path) {
                    item.path = this.path + item.path;
                }
                item.route = parsedRoute;
                return item.toMiddleware();
            }
            item.route = parsedRoute;
            return item;
        }));
        return this;
    }
    /**
     * 注册中间件
     *
     * @param route 路由
     * @param handles 中间件对象或处理函数
     */
    add(route, ...handles) {
        for (const handle of handles) {
            const item = {
                route,
                handle,
                handleError: utils_1.isMiddlewareErrorHandle(handle),
                atEnd: false,
            };
            const i = this.stack.findIndex((v) => v.atEnd);
            if (i === -1) {
                this.stack.push(item);
            }
            else {
                this.stack.splice(i, -1, item);
            }
        }
    }
    /**
     * 添加中间件到末尾
     *
     * @param raw 原始路由信息
     * @param route 路由
     * @param handles 中间件对象或处理函数
     */
    addToEnd(raw, route, ...handles) {
        for (const handle of handles) {
            const item = {
                route,
                handle,
                handleError: utils_1.isMiddlewareErrorHandle(handle),
                atEnd: true,
                raw,
            };
            this.stack.push(item);
        }
    }
    /**
     * 通过原始ServerRequest和ServerResponse对象处理请求
     * @param req 原始ServerRequest对象
     * @param res 原始ServerResponse对象
     * @param done 未处理请求回调函数
     */
    handleRequestByRequestResponse(req, res, done) {
        this.handleRequestByContext(this.createContext(req, res), done);
    }
    /**
     * 通过Context对象处理请求
     *
     * @param ctx Context对象
     * @param done 未处理请求回调函数
     */
    handleRequestByContext(ctx, done) {
        let index = 0;
        const getNextHandle = () => {
            const handle = this.stack[index++];
            if (!handle)
                return;
            if (handle.handleError)
                return getNextHandle();
            return handle;
        };
        const getNextErrorHandle = () => {
            const handle = this.stack[index++];
            if (!handle)
                return;
            if (!handle.handleError)
                return getNextErrorHandle();
            return handle;
        };
        const next = (err) => {
            const handle = err ? getNextErrorHandle() : getNextHandle();
            err = err || null;
            if (err && ctx.listenerCount("error") > 0) {
                ctx.emit("error", err);
            }
            if (!handle) {
                ctx[define_1.SYMBOL_POP_NEXT_HANDLE]();
                return done(err || null);
            }
            if (!utils_1.testRoutePath(ctx.request.path, handle.route)) {
                return next(err);
            }
            if (handle.raw) {
                // 如果有匹配到路由则更新，没有匹配到则保留上一个
                let path = handle.raw.path;
                if (this.path) {
                    path = this.path + path;
                }
                ctx[define_1.SYMBOL_RAW_ROUTE_INFO] = { method: handle.raw.method, path };
            }
            ctx.request.params = utils_1.getRouteParams(ctx.request.path, handle.route);
            utils_1.execMiddlewareHandle(handle.handle, ctx, err, next);
        };
        ctx[define_1.SYMBOL_PUSH_NEXT_HANDLE](next);
        ctx.next();
    }
}
exports.Core = Core;
