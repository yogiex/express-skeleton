"use strict";
/**
 * @leizm/web 中间件基础框架
 * @author Zongmin Lei <leizongmin@gmail.com>
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.Response = void 0;
const path = require("path");
const cookie_signature_1 = require("cookie-signature");
const cookie = require("cookie");
const send = require("send");
const mime = require("mime");
const define_1 = require("./define");
const utils_1 = require("./utils");
const response_gzip_1 = require("./module/response.gzip");
class Response {
    constructor(res, ctx) {
        this.res = res;
        this.ctx = ctx;
    }
    /**
     * 初始化完成，由 `Context.init()` 自动调用
     * 一般用于自定义扩展 Response 时，在此方法中加上自己的祝时候完成的代码
     */
    inited() { }
    /**
     * 响应状态码
     */
    get statusCode() {
        return this.res.statusCode;
    }
    /**
     * 响应状态消息
     */
    get statusMessage() {
        return this.res.statusMessage;
    }
    /**
     * 响应头是否已发送
     */
    get headersSent() {
        return this.res.headersSent;
    }
    /**
     * 是否已响应完成
     */
    get finished() {
        return this.res.finished;
    }
    /**
     * 设置响应状态码（弃用，请使用 status 代替）
     *
     * @param statusCode 响应状态码
     */
    setStatus(statusCode) {
        utils_1.notifyDeprecated("response.setStatus(code)", "response.status(code)", "3.0.0");
        return this.status(statusCode);
    }
    /**
     * 设置响应状态码
     *
     * @param statusCode 响应状态码
     */
    status(statusCode) {
        this.res.statusCode = statusCode;
        return this;
    }
    /**
     * 获取响应头
     *
     * @param name 名称
     */
    getHeader(name) {
        return this.res.getHeader(name);
    }
    /**
     * 获取所有响应头
     *
     * @param name 名称
     */
    getHeaders() {
        return (this.res.getHeaders ? this.res.getHeaders() : this.res._headers) || {};
    }
    /**
     * 设置响应头
     *
     * @param name 名称
     * @param value 值
     */
    setHeader(name, value) {
        this.res.setHeader(name, value);
        return this;
    }
    /**
     * 添加响应头
     *
     * @param name 名称
     * @param value 值
     */
    appendHeader(name, value) {
        let header = this.getHeader(name);
        if (!header) {
            header = [];
        }
        else if (!Array.isArray(header)) {
            header = [header];
        }
        if (Array.isArray(value)) {
            header = header.concat(value);
        }
        else {
            header.push(value);
        }
        this.setHeader(name, header);
        return this;
    }
    /**
     * 设置响应头
     *
     * @param headers 响应头
     */
    setHeaders(headers) {
        for (const name in headers) {
            this.setHeader(name, headers[name]);
        }
        return this;
    }
    /**
     * 删除响应头
     *
     * @param name 名称
     */
    removeHeader(name) {
        this.res.removeHeader(name);
        return this;
    }
    /**
     * 写响应头
     *
     * @param statusCode 响应状态码
     * @param headers 响应头
     */
    writeHead(statusCode, headers) {
        this.res.writeHead(statusCode, headers);
        return this;
    }
    /**
     * 根据文件名或文件后缀设置 Content-Type
     *
     * @param fileName
     */
    type(fileName) {
        const type = mime.getType(fileName);
        if (type) {
            this.setHeader("Content-Type", type);
        }
        return this;
    }
    /**
     * 输出数据
     *
     * @param data 要输出的数据
     * @param encoding 字符编码
     * @param callback 回调函数
     */
    write(data, encoding, callback) {
        return this.res.write.apply(this.res, arguments);
    }
    /**
     * 输出数据并结束
     *
     * @param data 要输出的数据
     * @param encoding 字符编码
     * @param callback 回调函数
     */
    end(data, encoding, callback) {
        return this.res.end.apply(this.res, arguments);
    }
    /**
     * 响应JSON
     * @param data 数据
     */
    json(data) {
        this.setHeader("Content-Type", "application/json");
        this.end(JSON.stringify(data));
    }
    /**
     * 响应HTML页面
     * @param str 内容
     */
    html(str) {
        this.setHeader("Content-Type", "text/html; charset=utf-8");
        this.end(str);
    }
    /**
     * 响应文件内容
     * @param file 文件名
     * @param options
     */
    file(file, options) {
        send(this.ctx.request.req, path.resolve(file), options)
            .on("error", (err) => {
            this.res.statusCode = err.status || 500;
            this.res.end(err.message);
        })
            .pipe(this.res);
    }
    /**
     * HTTP 302 临时重定向（弃用，请使用 redirectTemporary 代替）
     * @param url 网址
     * @param content 内容
     */
    temporaryRedirect(url, content = "") {
        utils_1.notifyDeprecated("response.temporaryRedirect()", "response.redirectTemporary()", "3.0.0");
        return this.redirectTemporary(url, content);
    }
    /**
     * HTTP 302 临时重定向
     * @param url 网址
     * @param content 内容
     */
    redirectTemporary(url, content = "") {
        this.writeHead(302, { Location: url });
        this.end(content);
    }
    /**
     * HTTP 301 永久重定向（弃用，请使用 redirectPermanent 代替）
     * @param url 网址
     * @param content 内容
     */
    permanentRedirect(url, content = "") {
        utils_1.notifyDeprecated("response.permanentRedirect()", "response.redirectPermanent()", "3.0.0");
        return this.redirectPermanent(url, content);
    }
    /**
     * HTTP 301 永久重定向
     * @param url 网址
     * @param content 内容
     */
    redirectPermanent(url, content = "") {
        this.writeHead(301, { Location: url });
        this.end(content);
    }
    /**
     * 删除Cookie
     * @param name 名称
     * @param options 选项
     */
    clearCookie(name, options = {}) {
        this.cookie(name, "", { expires: new Date(1), path: "/", ...options });
    }
    /**
     * 设置Cookie
     * @param name 名称
     * @param value 值
     * @param options 选项
     */
    cookie(name, value, options = {}) {
        const opts = { ...options };
        const secret = this.ctx.request.req.secret;
        if (opts.signed && !secret) {
            throw new Error('cookieParser("secret") required for signed cookies');
        }
        let val = typeof value === "object" ? "j:" + JSON.stringify(value) : String(value);
        if (opts.signed) {
            val = "s:" + cookie_signature_1.sign(val, secret);
        }
        if ("maxAge" in opts && opts.maxAge) {
            opts.expires = new Date(Date.now() + opts.maxAge);
            opts.maxAge /= 1000;
        }
        if (opts.path == null) {
            opts.path = "/";
        }
        this.appendHeader("Set-Cookie", cookie.serialize(name, String(val), opts));
    }
    /**
     * 渲染模板
     * @param name 模板名称
     * @param data 模板数据
     */
    async render(name, data = {}) {
        try {
            const html = await this.ctx[define_1.SYMBOL_CONNECT].templateEngine.render(name, data);
            if (!this.getHeader("Content-Type")) {
                this.setHeader("Content-Type", "text/html; charset=utf-8");
            }
            this.end(html);
        }
        catch (err) {
            this.ctx.next(err);
        }
    }
    /**
     * 响应压缩的内容
     * @param data
     * @param contentType
     */
    async gzip(data, contentType) {
        response_gzip_1.responseGzip(this.ctx.request.req, this.res, data, contentType);
    }
}
exports.Response = Response;
