import * as EventEmitter from "./events/EventEmitter";
import * as Request from "./Request";
import * as Response from "./Response";
import * as Foxify from "./index";
import { Engine } from "./view";
declare module Server {
    interface Options extends Foxify.Options {
    }
    interface Settings extends Foxify.Settings {
        view?: Engine;
    }
    type Listener = (request: Request, response: Response) => void;
    type Callback = (server: Server) => void;
}
interface Server {
    on(event: EventEmitter.ErrorEvent, listener: EventEmitter.ErrorListener): this;
    on(event: "uncaughtException", listener: EventEmitter.ExceptionListener): this;
    on(event: "unhandledRejection", listener: EventEmitter.RejectionListener): this;
}
declare class Server {
    private _instance?;
    protected _host: string;
    protected _port: number;
    protected _listening: boolean;
    constructor(options: Server.Options, settings: Server.Settings, listener: Server.Listener);
    readonly listening: boolean;
    start(callback?: Server.Callback): this;
    stop(callback?: Server.Callback): this;
    reload(callback?: Server.Callback): this;
}
export = Server;
