"use strict";
const http = require("http");
const https = require("https");
const cluster = require("cluster");
const qs = require("qs");
const events = require("./events");
const Request = require("./Request");
const Response = require("./Response");
const utils_1 = require("./utils");
class Server {
    constructor(options, settings, listener) {
        this._listening = false;
        this._host = settings.url;
        this._port = settings.port;
        const isHttps = options.https;
        const SERVER = isHttps ? https : http;
        const IncomingMessage = Request;
        IncomingMessage.prototype.settings = {
            subdomain: Object.assign({}, settings.subdomain),
        };
        const queryParse = settings.query.parser || qs.parse;
        Object.defineProperty(IncomingMessage.prototype, "query", {
            get() {
                return queryParse(utils_1.parseUrl(this).query, { allowDots: true });
            },
        });
        const ServerResponse = Response;
        ServerResponse.prototype.settings = {
            engine: settings.view,
            json: {
                escape: options.json.escape,
                spaces: settings.json.spaces,
                replacer: settings.json.replacer,
            },
        };
        const OPTIONS = { IncomingMessage, ServerResponse };
        if (isHttps) {
            const httpsSettings = settings.https;
            OPTIONS.cert = httpsSettings.cert;
            OPTIONS.key = httpsSettings.key;
        }
        this.on("error", HttpException.handle);
        const workers = settings.workers;
        if (workers > 1) {
            if (cluster.isMaster) {
                for (let i = 0; i < workers; i++)
                    cluster.fork();
                return this;
            }
            this._instance = SERVER.createServer(OPTIONS, listener);
            return this;
        }
        this._instance = SERVER.createServer(OPTIONS, listener);
    }
    get listening() {
        return this._listening;
    }
    start(callback) {
        this._listening = true;
        const instance = this._instance;
        if (instance)
            instance.listen(this._port, this._host, callback && (() => callback(this)));
        return this;
    }
    stop(callback) {
        this._listening = false;
        const instance = this._instance;
        if (instance)
            instance.close(callback && (() => callback(this)));
        return this;
    }
    reload(callback) {
        if (this._listening)
            return this.stop((server) => server.start(callback));
        return this.start(callback);
    }
    on(event, listener) {
        events.on(event, listener);
        return this;
    }
}
module.exports = Server;
