"use strict";
const Base = require("events");
const constants_1 = require("../constants");
const utils_1 = require("../utils");
const ERRORS = utils_1.object.reduce(constants_1.http, (prev, code) => {
    prev.push(`error-${code}`);
    return prev;
}, []);
const EVENTS = ["uncaughtException", "unhandledRejection", "error"]
    .concat(ERRORS);
class EventEmitter extends Base {
    on(event, listener) {
        if (!EVENTS.includes(event))
            throw new TypeError(`Unexpected event "${event}"`);
        switch (event) {
            case "uncaughtException":
            case "unhandledRejection":
                process.removeAllListeners(event)
                    .on(event, listener);
                break;
            case "error":
                ERRORS.forEach((error) => this.on(error, listener));
                break;
            default:
                this.removeAllListeners(event);
                super.on(event, listener);
        }
        return this;
    }
    emit(event, error, req, res) {
        if (!EVENTS.includes(event) || event === "error")
            throw new TypeError(`Unexpected event "${event}"`);
        return super.emit(event, error, req, res);
    }
}
module.exports = EventEmitter;
