import "./bootstrap";
import * as inject from "@foxify/inject";
import * as constants from "./constants";
import { Layer, Router } from "./routing";
import * as Server from "./Server";
import * as RequestClass from "./Request";
import * as ResponseClass from "./Response";
declare namespace Foxify {
    interface Options {
        https: boolean;
        "x-powered-by": boolean;
        routing: {
            "case-sensitive": boolean;
            "ignore-trailing-slash": boolean;
            "allow-unsafe-regex": boolean;
        };
        json: {
            escape: boolean;
        };
    }
    interface Settings {
        env: string;
        url: string;
        port: number;
        workers: number;
        subdomain: {
            offset?: number;
        };
        https: {
            cert?: string;
            key?: string;
        };
        json: {
            replacer?: (...args: any[]) => any;
            spaces?: number;
        };
        query: {
            parser?: (...args: any[]) => any;
        };
        routing: {
            "max-param-length": number;
        };
    }
    type Request = RequestClass;
    type Response = ResponseClass;
    type Handler = Layer.Handler;
}
interface Foxify extends Router.MethodFunctions<Foxify> {
    get(setting: string): any;
    get(path: string, options: Layer.RouteOptions | Layer.Handler, ...controllers: Layer.Handler[]): this;
    use(path: string | Layer.Handler | Router, ...handlers: Array<Layer.Handler | Router>): this;
    param(param: string, handler: Layer.Handler): this;
}
declare class Foxify {
    static constants: typeof constants;
    static Router: typeof Router;
    static static: any;
    static dotenv: (path: string) => void;
    private _options;
    private _settings;
    private _router;
    private _view?;
    constructor();
    private _set;
    enable(option: string): this;
    disable(option: string): this;
    enabled(option: string): boolean;
    disabled(option: string): boolean;
    set(setting: string, value: any): this;
    prettyPrint(): string;
    /**
     * handle view
     * @param extension view template file extension
     * @param path the directory containing view templates
     */
    engine(extension: string, path: string, handler: () => void): this;
    inject(options: inject.Options | string, callback?: inject.Callback): Promise<inject.Response>;
    start(callback?: Server.Callback): Server;
}
export = Foxify;
