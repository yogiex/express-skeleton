"use strict";
const http_1 = require("http");
const constants_1 = require("../constants");
const htmlError_1 = require("./htmlError");
const utils = require("../utils");
class HttpException extends Error {
    constructor(message, code = constants_1.http.INTERNAL_SERVER_ERROR, errors = {}) {
        if (utils.object.isObject(message)) {
            errors = message;
            code = constants_1.http.INTERNAL_SERVER_ERROR;
            message = undefined;
        }
        else if (utils.number.isNumber(message)) {
            errors = utils.object.isObject(code) ? code : {};
            code = message;
            message = undefined;
        }
        if (utils.object.isObject(code)) {
            errors = code;
            code = constants_1.http.INTERNAL_SERVER_ERROR;
        }
        if (!message)
            message = http_1.STATUS_CODES[code];
        super(message);
        this.code = code;
        this.errors = errors;
    }
    static handle(exception = new HttpException(), req, res) {
        const code = exception.code || constants_1.http.INTERNAL_SERVER_ERROR;
        const message = exception.message || http_1.STATUS_CODES[code] || "";
        let stack;
        exception.path = req.path;
        if (process.env.NODE_ENV === "development") {
            console.error(exception);
            stack = utils.string.lines(exception.stack)
                .map((line) => line.replace(/^ */, ""));
            stack.shift();
        }
        res.status(code).format({
            "text/html": () => res.send(htmlError_1.default(code, http_1.STATUS_CODES[code], message, stack && stack.join("<br>").replace(/ /g, "&nbsp;"))),
            "application/json": () => {
                const json = { message, stack };
                const errors = exception.errors;
                if (errors && !utils.object.isEmpty(errors))
                    json.errors = errors;
                res.json(json);
            },
            "default": () => res.send(message),
        });
    }
}
HttpException.isHttpException = (arg) => arg instanceof HttpException;
module.exports = HttpException;
