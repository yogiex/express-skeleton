/**
 * convert key path string to key array
 * @private
 * @param {String} path
 * @returns {Array}
 * @example
 * pathToKeys("selector.to[0][11].value"); // ["selector", "to", 0, 11, "value"]
 */
export declare const pathToKeys: (path: string) => (string | number)[];
/**
 *
 * @private
 * @param {*} obj
 * @param {String} key
 * @param {*} value
 * @example
 * addPrototype(Object, "$size", function() {return this;});
 */
export declare const addPrototype: (obj: any, key: string, method: (...args: any[]) => any) => void;
/**
 *
 * @private
 * @param {Array} arr
 * @param {String} [path]
 * @param {Function} fn
 * @returns {*}
 * @example
 * filter([1, 2, 3], undefined, (value) => value > 1);
 */
export declare const filter: <T = any>(arr: T[], path: string | undefined, fn: (value: T, index: number, array: T[]) => any) => T[];
/**
 *
 * @private
 * @param {*} value
 * @returns {*}
 * @example
 * deepClone([1, 2, 3]);
 */
export declare const deepClone: <T = any>(value: T) => T;
