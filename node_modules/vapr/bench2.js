'use strict';
const nodemark = require('nodemark');
const benchmark = (n, f) => nodemark(f, typeof setup === 'function' ? setup : undefined).then(r => console.log(`${n} x ${r.toString('hz')}`));
const http = require('http');
const Express = require('express')();
const Koa = new (require('koa-router'))();
const Vapr = require('.')();

Express.get('/hello', (req, res) => {
	res.end('hello');
});

Koa.get('/hello', (ctx) => {
	ctx.body = 'hello';
});

Vapr.get('/hello', (req) => {
	return [['hello']];
});


const express = (done) => {
	http.get({ path: '/path', port: 18001 }, (res) => {
		res.on('end', done);
		res.resume();
	});
};

const koa = (done) => {
	http.get({ path: '/path', port: 18002 }, (res) => {
		res.on('end', done);
		res.resume();
	});
};

const vapr = (done) => {
	http.get({ path: '/path', port: 18003}, (res) => {
		res.on('end', done);
		res.resume();
	});
};


let result;
const s1 = http.createServer(Express).listen(18001, () => {
	const s2 = http.createServer(new (require('koa'))().use(Koa.routes()).callback()).listen(18002, () => {
		const s3 = http.createServer(Vapr).listen(18003, async () => {
			console.log('');
			await benchmark('express', express);
			await benchmark('koa    ', koa);
			await benchmark('vapr   ', vapr);
			console.log(String(result).replace(/[^~]/g, ''));
			s1.close();
			s2.close();
			s3.close();
			process.exit(0);
		});
	});
});
