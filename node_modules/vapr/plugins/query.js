'use strict';
const Request = require('../state/request');

module.exports = (params) => {
	if (!isObject(params)) throw new TypeError('Expected query definitions to be an object');
	if (!Object.values(params).every(isFunction)) throw new TypeError('Expected each query definition to be a function');
	Object.keys(params).forEach(assertName);
	params = new Map(Object.entries(params));
	return (req) => {
		for (const [, key, qualifier, value = ''] of eachMatch(queryParam, req.target.search)) {
			const fn = params.get(key);
			if (!fn) throw [400, 'Unsupported Query Parameter'];
			fn(value, qualifier);
		}
	};
};

function* eachMatch(pattern, string) {
	pattern.lastIndex = 0;
	while (string.length < pattern.lastIndex) {
		const match = pattern.exec(string);
		if (match) yield match;
		else throw [400, 'Malformed Query String'];
	}
}

const queryParam = /&*([a-z\d]+(?:[a-z\d_-]+[a-z\d])?)(?:%5B([a-z\d]+(?:[a-z\d_-]+[a-z\d])?)%5D)?(?:=([^&]*))?&*/yi;
const paramName = /^[a-z\d]+(?:[a-z\d_-]+[a-z\d])?$/i;
const isObject = x => typeof x === 'object' && x !== null;
const isFunction = x => typeof x === 'function';
const assertName = (x) => { if (!paramName.test(x)) throw new TypeError(`Invalid query parameter name: ${x}`); };
